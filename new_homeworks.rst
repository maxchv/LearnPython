
Задание 1
---------

Преобразовать строку original_string в ее зеркальное отражение (реверсировать). 
Написать кусок Python кода, который печатает измененную строку

Пишите свой код в следующем окне, предполагая, что original_string уже определена. Описываете логику преобразования 
original_string в reverse_string и не забываем печатать результат print(reverse_string)

Пример
original_string = "ambulance"
reverse_string = "ecnalubma"

Решение
reverse_string = original_string[::-1]
print(reverse_string)

Задание 2
---------

Дана строка original_string. Реализовать функционал который возвращает прореженную строку change_string, оставляя только каждый третий символ.

Пишите свой код в следующем окне, предполагая, что original_string уже определена. 
Описываете логику преобразования original_string в change_string и не забываем печатать результат print(change_string)

Пример
original_string = '123456 7 890 abc'
change_string = '36 0b'

Решение
change_string = original_string[2::3]
print(change_string)

Задание 3
---------

Подсчет гласных букв в строке var_string.

Примечание:

    для простоты строка var_string состоит из букв латинского алфавита;
    набор гласных принимаем за 'a', 'e', 'i', 'o', 'u';
    программа должна быть нечувствительна к регистру.

Пишите свой код в следующем окне, предполагая, что var_string уже определена. Описываете логику подсчета гласных букв и не забываем печатать результат print(counting_vowels)

Пример
var_string = "hApPyHalLOweEn!"
counting_vowels = 5

Решение
counting_vowels = 0
for char in var_string:
    if char.lower() in ['a', 'e', 'i', 'o', 'u']:
        counting_vowels += 1
print(counting_vowels)

Задание 4
---------

Реализовать подсчет количества вхождений подстроки "wow" в строке var_string.

Пишите свой код в следующем окне, предполагая, что var_string уже определена. Описываете логику и не забываем печатать результат print(count)

Пример
var_string = "wowhatamanwowowpalehche"
count = 3

Решение
count = 0
for i in range(len(var_string)):
    if var_string[i:i+3] == 'wow':
        count += 1
print(count)

Задание 5
---------

Написать фрагмент python кода, который будет находить в строке text слова палиндромы (слова, читающиеся одинаково в обоих направлениях) 
и выводить на печать количество найденых слов.

Примечание
в строке могут быть знаки припинания , . : ; ! ? которые не должны влиять на результат
регистр в слове не имеет значения слово "sos" и "Sos" считается палиндромом.

Пишите свой код в следующем окне, предполагая, что text уже определена. Описываете логику выполнения и не забывайте печатать результат print(palindromes)

Пример
text = "Swedish pop group ABBA, single SOS unique occo both palindromes."
palindromes = 4

Решение
palindromes = 0
for word in text.split():
    word = word.lower().rstrip(',.:;!?')
    if word == word[::-1]:
        palindromes += 1
print(palindromes)

Задание 6
---------

Написать фрагмент python кода, который модифицирует строку чисел var_string следующим образом:
- в начале строки идут нечетные числа в порядке возрастания
- далее идут четные числа в порядке убывания
и выводит на печать измененную строку var_string.

Пишите свой код в следующем окне, предполагая, что var_string уже определена. Описываете логику выполнения и не забывайте печатать результат print(change_string)

Пример
var_string = '1486371'
change_string = '1137864'

Решение
odds = filter(lambda x: int(x) % 2 == 1, list(var_string))
evens = filter(lambda x: int(x) % 2 == 0, list(var_string))
change_string = ''.join(sorted(odds) + sorted(evens, reverse=True))
print (change_string)

p.s. В этом примере используются анонимная функция lambda, которую мы будем проходить на второй неделе. 
Но мы можете ознакомиться с ними заранее, как пример решения нашей контрольной работы.

Задание 7
---------

Написать фрагмент python кода, который будет находить в строке var_string подстроку, упорядоченною в алфавитном порядке, максимальной длины. Если длины строк совпадают печатаем первую найденную.

Пишите свой код в следующем окне, предполагая, что var_string уже определена. Описываете логику и не забываем печатать результат print(longest)

Пример
var_string = "sabrrtuwacaddabra"
longest = "abrrtuw"

Решение
longest = ''
if var_string:
    curString = var_string[0]
    longest = var_string[0]
    for i in range(1, len(var_string)):
        if var_string[i] >= curString[-1]:
            curString += var_string[i]
            if len(curString) > len(longest):
                longest = curString
        else:
            curString = var_string[i]
print(longest)

Задание 8
---------

 Дан текст, который содержит различные английские буквы и знаки препинания. Вам необходимо найти самую частую букву в тексте. Результатом должна быть буква в нижнем регистре.
При поиске самой частой буквы, регистр не имеет значения, так что при подсчете считайте, что "A" == "a". Убедитесь, что вы не считайте знаки препинания, цифры и пробелы, а только буквы.

Если в тексте две и больше буквы с одинаковой частотой, тогда результатом будет буква, которая идет первой в алфавите. Для примера, "one" содержит "o", "n", "e" по одному разу, так что мы выбираем "e".

Вх. данные: Текст для анализа, как строка.

Вых. данные: Наиболее частая буква, как строка.

Примеры:

​

checkio("Hello World!") == "l"

checkio("How do you do?") == "o"

checkio("One") == "e"

checkio("Oops!") == "o"

checkio("AAaooo!!!!") == "a"

checkio("abe") == "a"

​
Как это используется: Для большинства задач по дешифрованию необходимо знать частоту появления различных букв в подобном тексте. Для примера, мы легко можем взломать одноалфавитный шифр подстановки, если мы знаем вероятность появления букв. Это также может быть полезной информацией для лингвистов.

Предусловия:
text содержит только ASCII символы

Задание 9
---------

ан кусок текста. Соберите все заглавные буквы в одно слово в том порядке как они встречаются в куске текста.

Например: текст = "How are you? Eh, ok. Low or Lower? Ohhh.", если мы соберем все заглавные буквы, то получим сообщение "HELLO".

Входные данные: Текст как строка (юникод).

Выходные данные: Секретное сообщение как строка или пустая строка.

Пример:

find_message("How are you? Eh, ok. Low or Lower? Ohhh.") == "HELLO"

find_message("hello world!") == ""

Задание 10
----------

 Дана строка со словами и числами, разделенными пробелами (один пробел между словами и/или числами). Слова состоят только из букв. Вам нужно проверить есть ли в исходной строке три слова подряд. Для примера, в строке "start 5 one two three 7 end" есть три слова подряд.

Входные данные: Строка со словами (str).

Выходные данные: Ответ как логическое выражение (bool), True или False.

Примеры:

checkio("Hello World hello") == True

checkio("He is 123 man") == False

checkio("1 2 3 4") == False

checkio("bla bla bla bla") == True

checkio("Hi") == False

Задание 11
----------

 Алфавит разделен на гласные и согласные буквы (Да, мы разделили буквы, а не звуки).
Гласные -- A E I O U Y
Согласные -- B C D F G H J K L M N P Q R S T V W X Z

Дан текст с разными словами и/или числами, которые разделены пробелами и знаками пунктуации. Числа не считаются за слова (также как и смесь букв и цифр). Необходимо подсчитать слова, в которых гласные буквы чередуются с согласными (полосатые слова), то есть в таких словах нет двух гласных или двух согласных букв подряд. Слова состоящие из одной буквы - не "полосатые" (не считайте их). Регистр букв не имеет значения.

Входные данные: Текст, как строка (str).

Выходные данные: Количество "полосатых" слов, как целое число (int).

Примеры:

checkio("My name is ...") == 3

checkio("Hello world") == 0

checkio("A quantity of striped words.") == 1, "Only of"

checkio("Dog,cat,mouse,bird.Human.") == 3

Задание 12
----------

 Римские цифры пришли к нам из древней римской системы счета. Они основаны на особых буквах алфавита, которые в различных сочетаниях, путем суммирования (а иногда и разницы) описывают различные числа. Первые 10 римских чисел это:

I, II, III, IV, V, VI, VII, VIII, IX, and X.

Римская система счета имеет десятичное основание, но она непозиционная и не включает в себя 0 (ноль). Римские числа образуются путем комбинации следующих семи символов:
Символ	Значение
I	1 (unus)
V	5 (quinque)
X	10 (decem)
L	50 (quinquaginta)
C	100 (centum)
D	500 (quingenti)
M	1,000 (mille)

Узнать больше о римских цифрах вы можете в статье на Википедии.

В этой задаче, вам необходимо преобразовать данное целое число (от 1 до 3999) в римскую систему счета.

Вх. данные: Число, как целочисленное (int).

Вых. данные: Римское число, как строка (str).

Примеры:

checkio(6) == 'VI'

checkio(76) == 'LXXVI'

checkio(13) == 'XIII'

checkio(44) == 'XLIV'

checkio(3999) == 'MMMCMXCIX'



